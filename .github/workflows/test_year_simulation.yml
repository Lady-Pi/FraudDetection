name: Test Full Year Simulation

on:
  workflow_dispatch:
    inputs:
      start_month:
        description: 'Starting month (01-12)'
        required: false
        default: '01'
        type: string
      end_month:
        description: 'Ending month (01-12)'
        required: false
        default: '12'
        type: string

env:
  PYTHON_VERSION: '3.11'
  MLFLOW_TRACKING_URI: file:./mlruns
  PERFORMANCE_THRESHOLD: 0.05

jobs:
  simulate-year:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create directories
      run: |
        mkdir -p models/current models/archive metrics/artifacts logs mlruns

    - name: Verify monthly data
      run: |
        echo "Verifying existing monthly data structure:"
        for month in {01..12}; do
          if [ -d "data/monthly/$month" ]; then
            loans=$(wc -l < "data/monthly/$month/loan_applications.csv" 2>/dev/null || echo "0")
            trans=$(wc -l < "data/monthly/$month/transactions.csv" 2>/dev/null || echo "0")
            echo "Month $month: $loans loans, $trans transactions"
          else
            echo "Month $month: MISSING"
            exit 1
          fi
        done

    - name: Initialize baseline model
      run: |
        echo "Training initial baseline model (months 01-03)..."
        python -m src.models.train --through 03
        
        if [ -f "models/current/model.pkl" ]; then
          echo "Baseline model created successfully"
        else
          echo "Failed to create baseline model"
          exit 1
        fi

    - name: Simulate monthly evaluations
      run: |
        echo "Starting 12-month simulation..."
        echo "Month,Initial_Accuracy,AUROC,Performance_Drop,Needs_Retrain,Post_Retrain_Accuracy,Action_Taken" > simulation_results.csv
        
        START_MONTH=${{ github.event.inputs.start_month }}
        END_MONTH=${{ github.event.inputs.end_month }}
        
        for MONTH in $(seq -w ${START_MONTH#0} ${END_MONTH#0}); do
          echo ""
          echo "Evaluating Month $MONTH..."
          
          python -m src.models.evaluate --month $MONTH --output-json
          
          if [ -f "evaluation_results.json" ]; then
            INITIAL_ACCURACY=$(python -c "import json; print(json.load(open('evaluation_results.json'))['accuracy'])")
            AUROC=$(python -c "import json; print(json.load(open('evaluation_results.json'))['auroc'])")
            BASELINE_ACCURACY=$(python -c "import json; print(json.load(open('evaluation_results.json')).get('baseline_accuracy', 0.8))")
            
            ACCURACY_DROP=$(python -c "print($BASELINE_ACCURACY - $INITIAL_ACCURACY)")
            NEEDS_RETRAIN=$(python -c "print($ACCURACY_DROP >= ${{ env.PERFORMANCE_THRESHOLD }})")
            
            echo "  Initial accuracy: $INITIAL_ACCURACY"
            echo "  AUROC: $AUROC"
            echo "  Performance drop: $ACCURACY_DROP"
            
            POST_RETRAIN_ACCURACY="N/A"
            
            if [ "$NEEDS_RETRAIN" == "True" ]; then
              echo "  RETRAINING TRIGGERED - Performance drop detected!"
              
              python -m src.models.train --through $MONTH
              
              if [ -f "models/current/model.pkl" ]; then
                echo "  Retraining completed for month $MONTH"
                ACTION_TAKEN="retrained"
                
                python -m src.models.evaluate --month $MONTH --output-json
                POST_RETRAIN_ACCURACY=$(python -c "import json; print(json.load(open('evaluation_results.json'))['accuracy'])")
                NEW_AUROC=$(python -c "import json; print(json.load(open('evaluation_results.json'))['auroc'])")
                echo "  Post-retrain accuracy: $POST_RETRAIN_ACCURACY"
                echo "  Post-retrain AUROC: $NEW_AUROC"
                
                # Update AUROC to post-retrain value for final reporting
                AUROC=$NEW_AUROC
              else
                echo "  Retraining failed"
                ACTION_TAKEN="retrain_failed"
                POST_RETRAIN_ACCURACY="FAILED"
              fi
            else
              echo "  Model performance acceptable"
              ACTION_TAKEN="no_action"
            fi
            
            echo "$MONTH,$INITIAL_ACCURACY,$AUROC,$ACCURACY_DROP,$NEEDS_RETRAIN,$POST_RETRAIN_ACCURACY,$ACTION_TAKEN" >> simulation_results.csv
          else
            echo "  Evaluation failed for month $MONTH"
            echo "$MONTH,ERROR,ERROR,ERROR,ERROR,ERROR,evaluation_failed" >> simulation_results.csv
          fi
          
          sleep 5
        done
        
        echo ""
        echo "Simulation Complete! Results:"
        echo "=================================="
        cat simulation_results.csv

    - name: Generate simulation report
      run: |
        python << 'EOF'
        import pandas as pd
        import json
        from datetime import datetime
        
        try:
            # Read CSV without automatically converting N/A to NaN
            df = pd.read_csv('simulation_results.csv', keep_default_na=False)
            
            total_months = len(df)
            retraining_months = len(df[df['Needs_Retrain'] == True])
            
            # Calculate average accuracy for successful evaluations
            successful_evals = df[df['Initial_Accuracy'] != 'ERROR']
            avg_initial_accuracy = successful_evals['Initial_Accuracy'].astype(float).mean()
            
            # Calculate average post-retrain accuracy (only for retrained months)
            retrained_success = df[(df['Post_Retrain_Accuracy'] != 'N/A') & 
                                  (df['Post_Retrain_Accuracy'] != 'ERROR') & 
                                  (df['Post_Retrain_Accuracy'] != 'FAILED')]
            avg_post_retrain = retrained_success['Post_Retrain_Accuracy'].astype(float).mean() if len(retrained_success) > 0 else None
            
            retrained_months = df[df['Needs_Retrain'] == True]['Month'].astype(str).str.zfill(2).tolist()
            
            report = {
                "simulation_date": datetime.now().isoformat(),
                "total_months_evaluated": total_months,
                "retraining_triggered": retraining_months,
                "average_initial_accuracy": round(avg_initial_accuracy, 4),
                "average_post_retrain_accuracy": round(avg_post_retrain, 4) if avg_post_retrain else None,
                "retrained_months": retrained_months,
                "summary": f"Completed evaluation of {total_months} months with {retraining_months} retraining events"
            }
            
            with open('simulation_report.json', 'w') as f:
                json.dump(report, f, indent=2)
            
            print("SIMULATION REPORT GENERATED")
            print("=" * 50)
            print(f"Months evaluated: {total_months}")
            print(f"Retraining events: {retraining_months}")
            print(f"Average initial accuracy: {avg_initial_accuracy:.4f}")
            if avg_post_retrain:
                print(f"Average post-retrain accuracy: {avg_post_retrain:.4f}")
            print(f"Months that triggered retraining: {retrained_months}")
            
        except Exception as e:
            print(f"Error generating report: {e}")
        EOF

    - name: Upload simulation artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: year-simulation-results
        path: |
          simulation_results.csv
          simulation_report.json
          metrics/artifacts/
          metrics/performance_history.csv
        retention-days: 180

    - name: Summary Report
      if: always()
      run: |
        python << 'EOF'
        import pandas as pd
        
        try:
            df = pd.read_csv('simulation_results.csv')
            
            with open('summary_report.md', 'w') as f:
                f.write("## MLOps Pipeline - Full Year Simulation Results\n\n")
                
                # Basic overview
                total_months = len(df)
                retrained_months = df[df['Needs_Retrain'] == True]
                retrain_count = len(retrained_months)
                
                f.write("### Overview\n")
                f.write(f"- **Total months evaluated**: {total_months}\n")
                f.write(f"- **Retraining events**: {retrain_count}\n")
                if retrain_count > 0:
                    months = ', '.join([f"{int(m):02d}" for m in retrained_months['Month']])
                    f.write(f"- **Months retrained**: {months}\n")
                f.write("\n")
                
                # Improved results table with clearer column structure
                f.write("### Monthly Results\n")
                f.write("| Month | Initial Accuracy | Performance Drop | Retrained | Post-Retrain Accuracy |\n")
                f.write("|-------|------------------|------------------|-----------|---------------------|\n")
                
                for _, row in df.iterrows():
                    month = f"{int(row['Month']):02d}"
                    
                    if row['Initial_Accuracy'] != 'ERROR':
                        initial_acc = f"{float(row['Initial_Accuracy']):.3f}"
                        perf_drop = f"{float(row['Performance_Drop']):.4f}"
                        post_retrain = row['Post_Retrain_Accuracy']
                        
                        # Format post-retrain accuracy
                        if post_retrain == 'N/A':
                            post_retrain_display = "N/A"
                        elif post_retrain in ['ERROR', 'FAILED']:
                            post_retrain_display = post_retrain
                        else:
                            try:
                                post_retrain_display = f"{float(post_retrain):.3f}"
                            except (ValueError, TypeError):
                                post_retrain_display = "N/A"
                    else:
                        initial_acc = "ERROR"
                        perf_drop = "ERROR"
                        post_retrain_display = "ERROR"
                    
                    retrained = "Yes" if row['Needs_Retrain'] == True else "No"
                    f.write(f"| {month} | {initial_acc} | {perf_drop} | {retrained} | {post_retrain_display} |\n")
                
                print("Summary report generated successfully")
            
            # Copy to GitHub step summary
            with open('summary_report.md', 'r') as f:
                content = f.read()
            
            with open('${{ github.step_summary }}', 'a') as f:
                f.write(content)
                
        except Exception as e:
            print(f"Summary generation failed: {e}")
            with open('${{ github.step_summary }}', 'a') as f:
                f.write("## MLOps Pipeline Results\n\nSimulation completed - check artifacts for detailed results.\n")
        EOF